-- MySQL Script generated by MySQL Workbench
-- Sat Nov 10 13:11:47 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema gestionactivos
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema gestionactivos
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `gestionactivos` DEFAULT CHARACTER SET latin1 ;
USE `gestionactivos` ;

-- -----------------------------------------------------
-- Table `gestionactivos`.`catalogo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`catalogo` (
  `IdCatalogo` INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Identificador único autogenerado para cada categoría',
  `DesCatalogo` VARCHAR(100) NOT NULL COMMENT 'Descripcion del catalogo',
  PRIMARY KEY (`IdCatalogo`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = latin1
COMMENT = 'Administración de los tipos de catalogos';


-- -----------------------------------------------------
-- Table `gestionactivos`.`catalogovalor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`catalogovalor` (
  `CodCatalogoValor` INT(11) NOT NULL,
  `IdCatalogo` INT(11) NOT NULL,
  `DescCatalogoValor` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`CodCatalogoValor`, `IdCatalogo`),
  INDEX `FK_CatalogoValor_Catalogo_IdCatalogo` (`IdCatalogo` ASC) VISIBLE,
  CONSTRAINT `FK_CatalogoValor_Catalogo_IdCatalogo`
    FOREIGN KEY (`IdCatalogo`)
    REFERENCES `gestionactivos`.`catalogo` (`IdCatalogo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COMMENT = 'Administracion de los valores de catalogo';


-- -----------------------------------------------------
-- Table `gestionactivos`.`archivoadjunto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`archivoadjunto` (
  `IdArchivoAdjunto` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'Identificador del archivo adjunto',
  `URL` LONGTEXT NULL DEFAULT NULL COMMENT 'Ruta del archivo en el servidor',
  `Contenido` LONGBLOB NULL DEFAULT NULL COMMENT 'Archivo guardado en bytes',
  `Extension` VARCHAR(20) NULL DEFAULT NULL COMMENT 'extensión del archivo para su recuperación',
  PRIMARY KEY (`IdArchivoAdjunto`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = latin1
COMMENT = 'Tabla para la gestión de archivos adjuntos de diferentes opciones como cotizaciones, reparaciones y otros';


-- -----------------------------------------------------
-- Table `gestionactivos`.`garantia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`garantia` (
  `IdGarantia` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'Identificador de la gantía',
  `FechaVencimiento` DATETIME NOT NULL,
  `Condiciones` VARCHAR(200) NULL DEFAULT NULL,
  `IdArchivoAdjunto` BIGINT(20) NULL DEFAULT NULL,
  PRIMARY KEY (`IdGarantia`),
  INDEX `FK_Garantia_ArchivoAdjunto_IdArchivoAdjunto` (`IdArchivoAdjunto` ASC) VISIBLE,
  CONSTRAINT `FK_Garantia_ArchivoAdjunto_IdArchivoAdjunto`
    FOREIGN KEY (`IdArchivoAdjunto`)
    REFERENCES `gestionactivos`.`archivoadjunto` (`IdArchivoAdjunto`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `gestionactivos`.`proveedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`proveedor` (
  `IdProveedor` INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Id del proveedor',
  `Nombre` VARCHAR(100) NOT NULL COMMENT 'Nombre del proveedor',
  PRIMARY KEY (`IdProveedor`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = latin1
COMMENT = 'Tabla de proveedores de activos';


-- -----------------------------------------------------
-- Table `gestionactivos`.`activo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`activo` (
  `IdActivo` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'Id interno autogenerado del activo',
  `Codigo` LONGTEXT NOT NULL COMMENT 'Código alfanumérico que identifica físicamente al activo',
  `CodCategoria` INT(11) NOT NULL COMMENT 'Id de la categoría (catálogo) a la que pertenece el activo',
  `Marca` VARCHAR(200) NOT NULL COMMENT 'Nombre de la empresa productora del activo',
  `PrecioAdquisicion` DECIMAL(18,2) NOT NULL DEFAULT '0.00' COMMENT 'Precio en el que se adquirió el activo',
  `IdProveedor` INT(11) NOT NULL COMMENT 'Id del proveedor al que se le hizo la compra del activo',
  `CodEstado` INT(11) NOT NULL COMMENT 'Estado del activo: 1-Activo, 2-Eliminado',
  `NumeroSerie` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Numero de serie de fábrica',
  `NumeroPlaca` VARCHAR(100) NULL DEFAULT NULL COMMENT 'Numero de placa en sistema financiero',
  `DesActivo` VARCHAR(300) NOT NULL COMMENT 'Descripción del activo',
  `FechaRegistro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Fecha en las que se registra el activo en el sistema',
  `FechaAdqusicion` DATE NOT NULL COMMENT 'Fecha en la que se hizo la compra',
  `IdGarantia` BIGINT(20) NULL DEFAULT NULL,
  PRIMARY KEY (`IdActivo`),
  INDEX `FK_Activo_CatalogoValor_CodCategoria` (`CodCategoria` ASC) VISIBLE,
  INDEX `FK_Activo_CatalogoValor_CodEstado` (`CodEstado` ASC) VISIBLE,
  INDEX `FK_Activo_Proveedor_IdProveedor` (`IdProveedor` ASC) VISIBLE,
  INDEX `FK_Activo_Garantia_IdGarantia` (`IdGarantia` ASC) VISIBLE,
  CONSTRAINT `FK_Activo_CatalogoValor_CodCategoria`
    FOREIGN KEY (`CodCategoria`)
    REFERENCES `gestionactivos`.`catalogovalor` (`CodCatalogoValor`),
  CONSTRAINT `FK_Activo_CatalogoValor_CodEstado`
    FOREIGN KEY (`CodEstado`)
    REFERENCES `gestionactivos`.`catalogovalor` (`CodCatalogoValor`),
  CONSTRAINT `FK_Activo_Garantia_IdGarantia`
    FOREIGN KEY (`IdGarantia`)
    REFERENCES `gestionactivos`.`garantia` (`IdGarantia`),
  CONSTRAINT `FK_Activo_Proveedor_IdProveedor`
    FOREIGN KEY (`IdProveedor`)
    REFERENCES `gestionactivos`.`proveedor` (`IdProveedor`))
ENGINE = InnoDB
AUTO_INCREMENT = 37
DEFAULT CHARACTER SET = latin1
COMMENT = 'Tabla de activos';


-- -----------------------------------------------------
-- Table `gestionactivos`.`asignacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`asignacion` (
  `IdAsignacion` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'Id autogenerado de la tabla ',
  `FechaAsignacion` DATETIME NOT NULL COMMENT 'Fecha en la que se realiza la asignación',
  `IdentificacionResponsable` VARCHAR(20) NOT NULL COMMENT 'Identificación del responsable de la asignación',
  `CodEstadoAsignacion` INT(11) NOT NULL COMMENT 'Estado en que se encuenta la asignación',
  `FechaDevolucion` DATETIME NULL DEFAULT NULL COMMENT 'Fecha en que se devuelve la asignación',
  `BoletaSolicitud` BIGINT(20) NULL DEFAULT NULL,
  PRIMARY KEY (`IdAsignacion`),
  INDEX `FK_Asignacion_ArchivoAdjunto_BoletaSolicitud` (`BoletaSolicitud` ASC) VISIBLE,
  CONSTRAINT `FK_Asignacion_ArchivoAdjunto_BoletaSolicitud`
    FOREIGN KEY (`BoletaSolicitud`)
    REFERENCES `gestionactivos`.`archivoadjunto` (`IdArchivoAdjunto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COMMENT = 'Tabla para la gestion de asignaciones de activos a responsables';


-- -----------------------------------------------------
-- Table `gestionactivos`.`asignacionactivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`asignacionactivo` (
  `IdAsignacion` BIGINT(20) NOT NULL COMMENT 'Identificador de la asignacion',
  `IdActivo` BIGINT(20) NOT NULL COMMENT 'Identificador del activo',
  PRIMARY KEY (`IdAsignacion`, `IdActivo`),
  INDEX `FK_AsignacionActivo_Activo_IdActivo` (`IdActivo` ASC) VISIBLE,
  CONSTRAINT `FK_AsignacionActivo_Activo_IdActivo`
    FOREIGN KEY (`IdActivo`)
    REFERENCES `gestionactivos`.`activo` (`IdActivo`),
  CONSTRAINT `FK_AsignacionActivo_Asignacion_IdAsignacion`
    FOREIGN KEY (`IdAsignacion`)
    REFERENCES `gestionactivos`.`asignacion` (`IdAsignacion`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COMMENT = 'Tabla que define los activos especificos relacionados a una asignacion';


-- -----------------------------------------------------
-- Table `gestionactivos`.`cotizacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`cotizacion` (
  `IdCotizacion` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'Identificador autogenerado único de cotización',
  `IdProveedor` INT(11) NOT NULL COMMENT 'Identificador del proveedor que ofrece el activo',
  `IdArchivoAdjunto` BIGINT(20) NULL DEFAULT NULL COMMENT 'Identificador del archivo adjunto',
  `Monto` DECIMAL(18,2) NULL DEFAULT NULL COMMENT 'Monto total de la cotización',
  PRIMARY KEY (`IdCotizacion`),
  INDEX `FK_Cotizacion_ArchivoAdjunto_IdArchivoAdjunto` (`IdArchivoAdjunto` ASC) VISIBLE,
  INDEX `FK_Cotizacion_Proveedor_IdProveedor` (`IdProveedor` ASC) VISIBLE,
  CONSTRAINT `FK_Cotizacion_ArchivoAdjunto_IdArchivoAdjunto`
    FOREIGN KEY (`IdArchivoAdjunto`)
    REFERENCES `gestionactivos`.`archivoadjunto` (`IdArchivoAdjunto`),
  CONSTRAINT `FK_Cotizacion_Proveedor_IdProveedor`
    FOREIGN KEY (`IdProveedor`)
    REFERENCES `gestionactivos`.`proveedor` (`IdProveedor`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `gestionactivos`.`cotizacionactivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`cotizacionactivo` (
  `IdActivo` BIGINT(20) NOT NULL COMMENT 'Identificador del activo',
  `IdCotizacion` BIGINT(20) NOT NULL COMMENT 'Identificador de la cotizacion',
  PRIMARY KEY (`IdActivo`, `IdCotizacion`),
  INDEX `FK_CotizacionActivo_Cotizacion_IdCotizacion` (`IdCotizacion` ASC) VISIBLE,
  CONSTRAINT `FK_CotizacionActivo_Activo_IdActivo`
    FOREIGN KEY (`IdActivo`)
    REFERENCES `gestionactivos`.`activo` (`IdActivo`),
  CONSTRAINT `FK_CotizacionActivo_Cotizacion_IdCotizacion`
    FOREIGN KEY (`IdCotizacion`)
    REFERENCES `gestionactivos`.`cotizacion` (`IdCotizacion`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COMMENT = 'Tabla relacional entre cotizaciones y Activos';


-- -----------------------------------------------------
-- Table `gestionactivos`.`reparacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`reparacion` (
  `IdReparacion` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `DesReparacion` VARCHAR(100) NOT NULL,
  `NombreTaller` VARCHAR(100) NULL DEFAULT NULL,
  `FechaRegistro` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `FechaDevolucion` DATETIME NOT NULL,
  `CubiertoPorGarantia` TINYINT(1) NOT NULL,
  `IdArchivoAdjunto` BIGINT(20) NULL DEFAULT NULL,
  `IdActivo` BIGINT(20) NOT NULL,
  PRIMARY KEY (`IdReparacion`),
  INDEX `FK_Reparacion_Activo_IdActivo` (`IdActivo` ASC) VISIBLE,
  INDEX `FK_Reparacion_ArchivoAdjunto_IdArchivoAdjunto` (`IdArchivoAdjunto` ASC) VISIBLE,
  CONSTRAINT `FK_Reparacion_Activo_IdActivo`
    FOREIGN KEY (`IdActivo`)
    REFERENCES `gestionactivos`.`activo` (`IdActivo`),
  CONSTRAINT `FK_Reparacion_ArchivoAdjunto_IdArchivoAdjunto`
    FOREIGN KEY (`IdArchivoAdjunto`)
    REFERENCES `gestionactivos`.`archivoadjunto` (`IdArchivoAdjunto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `gestionactivos`.`tomafisicaperiodo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`tomafisicaperiodo` (
  `IdPeriodo` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'Identificador único autogenerado de la tabla',
  `FechaInicio` DATETIME NOT NULL COMMENT 'Fecha inicial de la toma fisica',
  `FechaFinal` DATETIME NOT NULL COMMENT 'Fecha en la que finaliza la toma fisica',
  `CodEstadoPeriodo` INT(11) NOT NULL COMMENT 'Catalogo de los estados del periodo',
  `Descripcion` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`IdPeriodo`),
  INDEX `FK_TomaFisicaPeriodo_CatalogoValor_CodEstadoPeriodo` (`CodEstadoPeriodo` ASC) VISIBLE,
  CONSTRAINT `FK_TomaFisicaPeriodo_CatalogoValor_CodEstadoPeriodo`
    FOREIGN KEY (`CodEstadoPeriodo`)
    REFERENCES `gestionactivos`.`catalogovalor` (`CodCatalogoValor`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COMMENT = 'Tabla para la gestión de los periodos de toma fisica';


-- -----------------------------------------------------
-- Table `gestionactivos`.`tomafisicaactivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gestionactivos`.`tomafisicaactivo` (
  `IdActivo` BIGINT(20) NOT NULL,
  `IdPeriodo` BIGINT(20) NOT NULL,
  `CodEstado` INT(11) NOT NULL,
  `Observaciones` VARCHAR(500) NULL DEFAULT NULL,
  PRIMARY KEY (`IdActivo`, `IdPeriodo`),
  INDEX `FK_TomaFisicaActivo_TomaFisicaPeriodo_IdPeriodo` (`IdPeriodo` ASC) VISIBLE,
  INDEX `FK_TomaFisicaActivo_CatalogoValor_CodEstado` (`CodEstado` ASC) VISIBLE,
  CONSTRAINT `FK_TomaFisicaActivo_Activo_IdActivo`
    FOREIGN KEY (`IdActivo`)
    REFERENCES `gestionactivos`.`activo` (`IdActivo`),
  CONSTRAINT `FK_TomaFisicaActivo_CatalogoValor_CodEstado`
    FOREIGN KEY (`CodEstado`)
    REFERENCES `gestionactivos`.`catalogovalor` (`CodCatalogoValor`),
  CONSTRAINT `FK_TomaFisicaActivo_TomaFisicaPeriodo_IdPeriodo`
    FOREIGN KEY (`IdPeriodo`)
    REFERENCES `gestionactivos`.`tomafisicaperiodo` (`IdPeriodo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1;

USE `gestionactivos` ;

-- -----------------------------------------------------
-- procedure pr_ChangeStateAsset
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_ChangeStateAsset`(pIdActivo int,pCodEstado int)
BEGIN
	update activo
    set	CodEstado = pCodEstado
	WHERE IdActivo = pIdActivo;	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_EditAssest
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_EditAssest`(pIdActivo int, pCodigo longtext, pCodCategoria int, pMarca varchar(200),
pPrecio decimal(18,2), pIdProveedor int, pCodEstado int, pNumSerie varchar(100), pNumPlaca varchar(100),
pDescripcion varchar(300), pFechaAdquisicion datetime, pIdGarantia bigint)
BEGIN

	update activo
    set	Codigo = pCodigo, 
		CodCategoria = pCodCategoria, 
		Marca = pMarca, 
		PrecioAdquisicion = pPrecio, 
		IdProveedor = pIdProveedor, 
		CodEstado = pCodEstado, 
		NumeroSerie = pNumSerie, 
		NumeroPlaca = pNumPlaca, 
		DesActivo = pDescripcion, 
		FechaAdqusicion = pFechaAdquisicion, 
		IdGarantia = case 
						when pIdGarantia  = 0 then null
						else pIdGarantia 
                    end
		WHERE IdActivo = pIdActivo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_EditRepair
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_EditRepair`(pIdActivo bigint, pDesReparacion varchar(100), pNombreTaller varchar(100), 
			pFechaDevolucion datetime,pCubiertoPorGrantia tinyint(1), pIdArchivoAdjunto int, pIdRepair bigint)
BEGIN

UPDATE reparacion
SET DesReparacion = pDesReparacion,
NombreTaller = pNombreTaller,
FechaDevolucion = pFechaDevolucion,
CubiertoPorGarantia =pCubiertoPorGrantia,
IdArchivoAdjunto = case when pIdArchivoAdjunto = 0 THEN NULL ELSE pIdArchivoAdjunto END
WHERE IdReparacion = pIdRepair;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_GetAllAssets
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_GetAllAssets`()
BEGIN
select IdActivo, Codigo, catalogoValorCategoria.DescCatalogoValor AS Categoria, Marca, PrecioAdquisicion, proveedor.Nombre AS Proveedor, 
        catalogoValorEstado.DescCatalogoValor AS Estado, NumeroSerie, NumeroPlaca, DesActivo, FechaRegistro, FechaAdqusicion, IdGarantia        
        from activo
        inner join catalogovalor AS catalogoValorCategoria on activo.CodCategoria = catalogoValorCategoria.CodCatalogoValor
        inner join catalogo  AS catalogoCategoria on catalogoCategoria.IdCatalogo = catalogoValorCategoria.IdCatalogo
        inner join catalogovalor AS catalogoValorEstado on activo.CodEstado = catalogoValorEstado.CodCatalogoValor
        inner join catalogo AS catalogoEstado on catalogoEstado.IdCatalogo = catalogoValorEstado.IdCatalogo
        inner join proveedor ON activo.IdProveedor = proveedor.IdProveedor
        WHERE catalogoCategoria.DesCatalogo = 'Categoría de activo'
        AND catalogoEstado.DesCatalogo = 'Estado de activo'
        ORDER BY IdActivo DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_GetAllCategoryAssest
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_GetAllCategoryAssest`()
BEGIN
select 	CodCatalogoValor, 
		DescCatalogoValor
from catalogovalor
where IdCatalogo = 1;/*Valor 1 porque es el catalogo de categrias de activos*/
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_GetAllQuotationByAssetId
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_GetAllQuotationByAssetId`(in idAsset integer)
BEGIN
	SELECT cot.IdCotizacion,
    IdArchivoAdjunto,
    Monto,
    prov.IdProveedor,
    prov.Nombre AS NombreProveedor
FROM gestionactivos.cotizacion as cot
INNER JOIN  gestionactivos.cotizacionactivo as cotactivo ON cot.IdCotizacion = cotactivo.IdCotizacion
INNER JOIN  gestionactivos.proveedor as prov ON prov.IdProveedor = cot.IdProveedor
WHERE cotactivo.IdActivo= idAsset
ORDER BY IdCotizacion DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_GetAllRepairsByAssetId
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_GetAllRepairsByAssetId`(in idAsset integer)
BEGIN
	
   SELECT `reparacion`.`IdReparacion`,
    `reparacion`.`DesReparacion`,
    `reparacion`.`NombreTaller`,
    `reparacion`.`FechaRegistro`,
    `reparacion`.`FechaDevolucion`,
    `reparacion`.`CubiertoPorGarantia`,
    `reparacion`.`IdArchivoAdjunto`,
    `reparacion`.`IdActivo`
FROM `gestionactivos`.`reparacion`
WHERE `reparacion`.`IdActivo`= idAsset
ORDER BY IdReparacion DESC;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_GetAssetById
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_GetAssetById`(SearchedAssetId INT)
BEGIN

select IdActivo, Codigo, catalogoValorCategoria.DescCatalogoValor AS Categoria, catalogoValorCategoria.IdCatalogo AS IdCategoria, 
Marca, PrecioAdquisicion, IdProveedor, catalogoValorEstado.DescCatalogoValor AS Estado, catalogoValorEstado.IdCatalogo AS IdEstado
, NumeroSerie, NumeroPlaca, DesActivo, FechaRegistro, FechaAdqusicion, IdGarantia        
        from activo
        inner join catalogovalor AS catalogoValorCategoria on activo.CodCategoria = catalogoValorCategoria.CodCatalogoValor
        inner join catalogo  AS catalogoCategoria on catalogoCategoria.IdCatalogo = catalogoValorCategoria.IdCatalogo
        inner join catalogovalor AS catalogoValorEstado on activo.CodEstado = catalogoValorEstado.CodCatalogoValor
        inner join catalogo AS catalogoEstado on catalogoEstado.IdCatalogo = catalogoValorEstado.IdCatalogo
        WHERE catalogoCategoria.DesCatalogo = 'Categoría de activo'
        AND catalogoEstado.DesCatalogo = 'Estado de activo'
        AND IdActivo = SearchedAssetId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_GetRepairById
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_GetRepairById`(in idRepair integer)
BEGIN
	
   SELECT `reparacion`.`IdReparacion`,
    `reparacion`.`DesReparacion`,
    `reparacion`.`NombreTaller`,
    `reparacion`.`FechaRegistro`,
    `reparacion`.`FechaDevolucion`,
    `reparacion`.`CubiertoPorGarantia`,
    `reparacion`.`IdArchivoAdjunto`,
    `reparacion`.`IdActivo`
FROM `gestionactivos`.`reparacion`
WHERE `reparacion`.`IdReparacion`= idRepair
ORDER BY IdReparacion DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_InsertAssest
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_InsertAssest`(pCodigo longtext, pCodCategoria int, pMarca varchar(200),
pPrecio decimal(18,2), pIdProveedor int, pCodEstado int, pNumSerie varchar(100), pNumPlaca varchar(100),
pDescripcion varchar(300), pFechaAdquisicion datetime, pFechaVencimiento datetime, pCondiciones varchar(200),
pURLArchivo longtext, pExtension varchar(20))
BEGIN

/*Variables*/
declare pIdArchivo bigint(20);
declare	pIdGarantia  bigint(20);
set pIdGarantia = 0;

/*Se realiza el registro del archivo si fue adjuntado*/
if pURLArchivo is not null then

/*Se inserta el archivo*/
insert into archivoadjunto(URL, Contenido, Extension)
values(pURLArchivo, null, pExtension);

/*Obtenemos el id del archivo insertado*/
set pIdArchivo = last_insert_id();

/*Se inserta la garantia*/
insert into garantia(FechaVencimiento, Condiciones, IdArchivoAdjunto)
values (pFechaVencimiento, pCondiciones, pIdArchivo);

/*Obtenemos el id de la grantia insertada*/
set pIdGarantia = last_insert_id();

end if;


/*Guardarmo el activo*/
insert into activo
		(  
			Codigo, 
			CodCategoria, 
			Marca, 
			PrecioAdquisicion, 
			IdProveedor, 
			CodEstado, 
			NumeroSerie, 
			NumeroPlaca, 
			DesActivo, 
			FechaRegistro, 
			FechaAdqusicion, 
			IdGarantia
		)
		values
		(
			pCodigo, 
			pCodCategoria, 
			pMarca, 
			pPrecio, 
			pIdProveedor, 
			pCodEstado, 
			pNumSerie, 
			pNumPlaca, 
			pDescripcion, 
			now(), 
			pFechaAdquisicion, 
			case 
				when pIdGarantia  = 0 then null
				else pIdGarantia 
			end
		);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_InsertRepair
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_InsertRepair`(pIdActivo bigint, pDesReparacion varchar(100), pNombreTaller varchar(100), 
			pFechaDevolucion datetime,pCubiertoPorGrantia tinyint(1), pIdArchivoAdjunto int)
BEGIN
INSERT INTO `gestionactivos`.`reparacion`
(`DesReparacion`,
`NombreTaller`,
`FechaRegistro`,
`FechaDevolucion`,
`CubiertoPorGarantia`,
`IdArchivoAdjunto`,
`IdActivo`)
VALUES
(pDesReparacion,
pNombreTaller,
Now(),
pFechaDevolucion,
pCubiertoPorGrantia,
case when pIdArchivoAdjunto = 0 THEN NULL ELSE pIdArchivoAdjunto END,
pIdActivo);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_deleteRepairById
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_deleteRepairById`(in Id Integer)
BEGIN
	DELETE FROM `gestionactivos`.`reparacion`
WHERE IdReparacion = Id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pr_getAllProviders
-- -----------------------------------------------------

DELIMITER $$
USE `gestionactivos`$$
CREATE DEFINER=`uned`@`%` PROCEDURE `pr_getAllProviders`()
BEGIN
	SELECT IdProveedor, Nombre
    FROM proveedor;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
